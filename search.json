[
  {
    "objectID": "notebooks/ethena.html",
    "href": "notebooks/ethena.html",
    "title": "Ethena Dashboard",
    "section": "",
    "text": "Code\nimport json, warnings, os\nfrom pathlib import Path\n\nwarnings.filterwarnings('ignore')\n\nif Path.cwd().name == \"notebooks\":\n    rootdir = Path.cwd().parent\nelse:\n    rootdir = Path.cwd()\n\nimport pandas as pd\nimport plotly.express as px\nfrom plotly import graph_objects as go\n\nfrom stables.utils.postgres import get_sqlalchemy_engine\nfrom stables.config import local_pg_config, remote_pg_config\nengine = get_sqlalchemy_engine(local_pg_config)\n\nimport plotly.offline as pyo\npyo.init_notebook_mode(connected=True)"
  },
  {
    "objectID": "notebooks/ethena.html#tvl",
    "href": "notebooks/ethena.html#tvl",
    "title": "Ethena Dashboard",
    "section": "TVL",
    "text": "TVL\n\nTVL by stablecoins\n\n\nCode\nlatest_tvl_query = \"\"\"\nWITH latest_date AS (\n    SELECT MAX(DATE(time)) as max_date\n    FROM llama.circulating\n)\nSELECT \n    (SELECT max_date FROM latest_date) as latest_date,\n    SUM(CASE WHEN id = 146 THEN circulating ELSE 0 END) as tvl_usde,\n    SUM(CASE WHEN id = 221 THEN circulating ELSE 0 END) as tvl_usdtb\nFROM llama.circulating\nWHERE DATE(time) = (SELECT max_date FROM latest_date)\n\"\"\"\nlatest_tvl_df = pd.read_sql(latest_tvl_query, engine)\nlatest_date = latest_tvl_df['latest_date'].iloc[-1]\ntvl_usde = latest_tvl_df['tvl_usde'].iloc[-1]\ntvl_usdtb = latest_tvl_df['tvl_usdtb'].iloc[-1]\ntvl = tvl_usde + tvl_usdtb\n\n\ngrouped_query = \"\"\"\nWITH data AS (\n    SELECT \n        DATE(time) as date,\n        CASE \n            WHEN id = 146 THEN 'USDe'\n        WHEN id = 221 THEN 'USDTB'\n        ELSE CAST(id AS VARCHAR)\n    END as id,\n    SUM(circulating) as tvl\n    FROM llama.circulating\n    GROUP BY DATE(time), id\n    ORDER BY DATE(time), id\n),\nsorted_data AS (\n    SELECT \n        date,\n        id,\n        tvl,\n        ROW_NUMBER() OVER (PARTITION BY date, id ORDER BY date DESC) as rn\n    FROM data\n)\nSELECT \n    date,\n    id,\n    tvl\nFROM sorted_data\nWHERE rn = 1\nORDER BY date, id\n\"\"\"\ndf = pd.read_sql(grouped_query, engine)\n\nfig = px.bar(df, x=\"date\", y=\"tvl\", color=\"id\", title=f\"Current TVL: {tvl/1e9:.2f}B, USDe: {tvl_usde/1e9:.2f}B, USDTB: {tvl_usdtb/1e9:.2f}B\",labels=\"\")\nfig.update_layout(\n    xaxis_title=\"Date\",\n    yaxis_title=\"TVL (USD)\",\n    legend_title_text=\"Stablecoin\"\n)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nTVL by chains\n\n\nCode\nquery = \"\"\"\nWITH data AS (\n    SELECT \n        DATE(time) as date,\n        chain,\n        SUM(circulating) as tvl\n    FROM llama.circulating\n    GROUP BY DATE(time), chain\n),\nsorted_data AS (\n    SELECT \n        date,\n        chain,\n        tvl,\n        ROW_NUMBER() OVER (PARTITION BY date, chain ORDER BY date DESC) as rn\n    FROM data\n)\nSELECT \n    date,\n    chain,\n    tvl\nFROM sorted_data\nWHERE rn = 1\nORDER BY date, chain\n\"\"\"\n\ndf = pd.read_sql(query, engine)\n\nfig = px.bar(df, x=\"date\", y=\"tvl\", color=\"chain\", title=\"Ethena TVL by chains\")\nfig.update_layout(\n    xaxis_title=\"Date\",\n    yaxis_title=\"TVL (USD)\",\n    legend_title_text=\"Chain\"\n)\nfig.show()"
  },
  {
    "objectID": "notebooks/ethena.html#usde",
    "href": "notebooks/ethena.html#usde",
    "title": "Ethena Dashboard",
    "section": "USDe",
    "text": "USDe\n\nTVL\n\n\nCode\nquery = \"\"\"\nSELECT * FROM llama.circulating\nWHERE id = 146\n\"\"\"\ndf= pd.read_sql(query, engine)\n\nl = df['time'].max()\n\ntvl = df[(df['time'] == l)]['circulating'].sum()\n\nn_chains = df[\n    (df['time'] == l) \n]['chain'].nunique()\n\n\ndf = df.groupby(['time', \"chain\"]).agg(\n    tvl=('circulating', 'sum')\n).reset_index()\ndf\n\nfig = px.bar(df, x=\"time\", y=\"tvl\", color=\"chain\", title=f\"{l.date()}, TVL: {tvl/1e9:.2f}B\", )\nfig.update_layout(\n    xaxis_title=\"Date\",\n    yaxis_title=\"TVL (USD)\",\n    legend_title_text=\"Chain\"\n)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nPrimary market\nMint and Redeem\n\n\nCode\nquery = \"\"\"\nWITH combined_events AS (\n    SELECT\n        contract_address,\n        block_timestamp,\n        benefactor,\n        beneficiary,\n        caller,\n        collateral_asset,\n        collateral_amount,\n        event_type,\n        CASE \n            WHEN event_type = 'mint' THEN usde_amount \n            ELSE -usde_amount \n        END as usde_amount\n    FROM ethena_.usde_mint_redeem_v1_events\n\n    UNION ALL\n\n    SELECT \n        contract_address,\n        block_timestamp,\n        benefactor,\n        beneficiary,\n        caller,\n        collateral_asset,\n        collateral_amount,\n        event_type,\n        CASE \n            WHEN event_type = 'mint' THEN usde_amount \n            ELSE -usde_amount \n        END as usde_amount\n    FROM ethena_.usde_mint_redeem_v2_events\n),\n\ndaily_totals AS (\n    SELECT \n        DATE(block_timestamp) as date,\n        event_type,\n        SUM(usde_amount) as usde_amount\n    FROM combined_events\n    GROUP BY DATE(block_timestamp), event_type\n),\n\ndaily_pivot AS (\n    SELECT \n        date,\n        SUM(CASE WHEN event_type = 'mint' THEN usde_amount ELSE 0 END) as mint,\n        SUM(CASE WHEN event_type = 'redeem' THEN usde_amount ELSE 0 END) as redeem,\n        SUM(usde_amount) as net_change\n    FROM daily_totals\n    GROUP BY date\n)\n\nSELECT \n    date,\n    mint / 1e18 as mint,\n    redeem / 1e18 as redeem,\n    net_change / 1e18 as net_change\nFROM daily_pivot\nORDER BY date;\n\"\"\"\ndf= pd.read_sql(query, engine)\n\n# Create the plot\nfig = go.Figure()\n\n# Add mint bars\nfig.add_trace(go.Bar(\n    x=df.index,\n    y=df['mint'],\n    name='Mint',\n    marker_color='green',\n    # opacity=0.7\n))\n\n# Add redeem bars\nfig.add_trace(go.Bar(\n    x=df.index,\n    y=df['redeem'],\n    name='Redeem',\n    marker_color='red',\n    # opacity=0.7\n))\n\n# Add net change line\nfig.add_trace(go.Scatter(\n    x=df.index,\n    y=df['net_change'],\n    name='Net Change',\n    mode='lines',\n    line=dict(color='blue', width=1),\n    # marker=dict(size=2),\n    opacity=0.7\n))\n\n# Update layout\nfig.update_layout(\n    title='Daily USDE Mint/Redeem Activities',\n    xaxis_title='Date',\n    yaxis_title='Amount (USDE)',\n    barmode='group',\n    hovermode='x unified'\n)\n\n# Show the plot\nfig.show() \n\n\n                            \n                                            \n\n\n\n\nUSDe staking\n\n\nCode\nquery = \"\"\"\nWITH usde_data AS (\n    SELECT \n        DATE(time) as date,\n        SUM(circulating) as usde\n    FROM llama.circulating\n    WHERE id = 146\n    GROUP BY DATE(time)\n),\nsusde_data AS (\n    SELECT \n        DATE(time) as date,\n        tvl_usd as susde\n    FROM llama.yield_pools\n    WHERE pool_id = '66985a81-9c51-46ca-9977-42b4fe7bc6df'\n),\ncombined_data AS (\n    SELECT \n        COALESCE(u.date, s.date) as date,\n        u.usde,\n        s.susde\n    FROM usde_data u\n    FULL OUTER JOIN susde_data s ON u.date = s.date\n),\nranked_data AS (\n    SELECT \n        date,\n        usde,\n        susde,\n        CASE \n            WHEN usde IS NOT NULL AND usde &gt; 0 \n            THEN (susde / usde) * 100 \n            ELSE NULL \n        END as staking_perc,\n        ROW_NUMBER() OVER (PARTITION BY date ORDER BY date DESC) as rn\n    FROM combined_data\n)\nSELECT \n    date,\n    usde,\n    susde,\n    staking_perc\nFROM ranked_data\nWHERE rn = 1\nORDER BY date\n\"\"\"\ndf = pd.read_sql(query, engine)\ncurrent_staking_perc = df[df['date'] == df['date'].max()]['staking_perc'].values[0]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=df['date'], y=df['usde'], name='USDe', opacity=0.5, yaxis='y'))\n\nfig.add_trace(go.Scatter(\n      x=df['date'],\n      y=df['staking_perc'],\n      mode='lines',\n      name='Staking %',\n      yaxis='y2'\n  ))\nfig.update_layout(\n      yaxis2=dict(\n          title=\"%\",\n          overlaying='y',\n          side='right'\n      ),\n    # title=\"Current USDe TVL: {:.2f}B, staking {:.2f}%\".format(tvl_usde/1e9, current_staking_perc),\n    xaxis_title=\"Date\",\n    yaxis_title=\"TVL (USD)\",\n  )"
  }
]